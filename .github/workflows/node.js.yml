# Example: .github/workflows/node.js.yml

# Name of the workflow
name: Node.js CI

# Specifies when the workflow should be triggered
on:
  # Triggers the workflow on 'push' events to the 'main' branch
  push:
    branches: [main]
  # Also triggers the workflow on 'pull_request' events targeting the 'main' branch
  pull_request:
    branches: [main]

# Defines the jobs that the workflow will execute
jobs:
  # Job identifier, can be any name (here it's 'build')
  build:
    runs-on: ubuntu-latest

    # Strategy for running the jobs - this section is useful for testing across multiple environments
    strategy:
    # A matrix build strategy to test against multiple versions of Node.js
    matrix:
        node-version: [14.x, 16.x]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build --if-present

    - # Runs tests as defined in the project's package.json
    run: npm test

    - name: Run Linter
    run: npx eslint .
    # 'npx eslint .' runs the ESLint tool on all the files in your repository.
    # ESLint is a static code analysis tool used to identify problematic patterns in JavaScript code.
    - name: Cache Node Modules
    uses: actions/cache@v2
    with:
        path: ~/.npm
        key: ${{" runner.os "}}-node-${{" hashFiles('**/package-lock.json') "}}
        restore-keys: |
        ${{" runner.os "}}-node-
    # This snippet caches the installed node modules based on the hash of the 'package-lock.json' file.
    # It helps in speeding up the installation process by reusing the cached modules when the 'package-lock.json' file hasn't changed.